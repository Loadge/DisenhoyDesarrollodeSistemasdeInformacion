package Napakalaki;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import javax.swing.*;
import org.netbeans.lib.awtextra.*; 
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import napakalaki.JD_dado;

public class VentanaPrincipal extends javax.swing.JFrame implements Vista {

    private Napakalaki juego;
    private JD_dado dado;
    private String[] nombresJugadores; 
    private List<Tesoro> listaTesorosVisiblesSeleccionados = new ArrayList<Tesoro>();
    private List<Tesoro> listaTesorosOcultosSeleccionados = new ArrayList<Tesoro>();
    private List<TesoroGrafico> tesorosActuales = new ArrayList<TesoroGrafico>();
    private static final int posXtesorOcult[] = {1, 140, 260, 380, 500, 620};
    private static final int posYtesorOcult = 250;
    private static final int posXtesorVisib[] = {1, 140, 260, 380, 500};
    private static final int posYtesorVisib = 50;


    public VentanaPrincipal(Napakalaki unJuego) {
        dado = new JD_dado(this, true);
        juego = unJuego;
        initComponents();
        //this.setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpEnemigo = new javax.swing.JPanel();
        jLnombreMonstruo = new javax.swing.JLabel();
        jLNivelesGanados = new javax.swing.JLabel();
        jLTesorosGanados = new javax.swing.JLabel();
        jlMalorro = new javax.swing.JLabel();
        jlAyuda = new javax.swing.JLabel();
        jLNivelCombate = new javax.swing.JLabel();
        jLNombreMonstruoMod = new javax.swing.JLabel();
        jLNivelesGanadosMod = new javax.swing.JLabel();
        jLTesorosGanadosMod = new javax.swing.JLabel();
        jLExplicacionMalRolloMod = new javax.swing.JLabel();
        jLMensajesdeAyudaMod = new javax.swing.JLabel();
        jLNivelCombateMod = new javax.swing.JLabel();
        jLResultado = new javax.swing.JLabel();
        jLResultadoMod = new javax.swing.JLabel();
        jBEquiparse = new javax.swing.JButton();
        jBComprar = new javax.swing.JButton();
        jBRobarTesoro = new javax.swing.JButton();
        jBDescartar = new javax.swing.JButton();
        jBCombatir = new javax.swing.JButton();
        jBSiguiente = new javax.swing.JButton();
        jPJugador = new javax.swing.JPanel();
        jLSectario = new javax.swing.JLabel();
        jPanelTesorosVisibles = new javax.swing.JPanel();
        jPTesoroVisible = new javax.swing.JPanel();
        jPanelTesorosOcultos = new javax.swing.JPanel();
        jpTesoroOculto = new javax.swing.JPanel();
        jLNombreJugadorMod = new javax.swing.JLabel();
        jLNombreyNivelJugador = new javax.swing.JLabel();
        jLNivelJugadorMod = new javax.swing.JLabel();
        jLSectarioSiNo = new javax.swing.JLabel();
        jLNivelCombateJugador = new javax.swing.JLabel();
        jLMalRolloVisibleTitulo = new javax.swing.JLabel();
        jLMalRolloVisibleJugador = new javax.swing.JLabel();
        jLMalRolloOcultoTitulo = new javax.swing.JLabel();
        jLMalRolloOcultoJugador = new javax.swing.JLabel();
        jLNVisiblesRestantes = new javax.swing.JLabel();
        jLNOcultosRestantes = new javax.swing.JLabel();
        jBAbandonar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jpEnemigo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Territorio del Terrible Monstruo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        jpEnemigo.setToolTipText("");

        jLnombreMonstruo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLnombreMonstruo.setText("Monstruo");

        jLNivelesGanados.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLNivelesGanados.setText("Niveles ganados");

        jLTesorosGanados.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLTesorosGanados.setText("Tesoros ganados");

        jlMalorro.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jlMalorro.setText("Mal rollo");

        jlAyuda.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jlAyuda.setText("Mensajes de ayuda");

        jLNivelCombate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLNivelCombate.setText("Nivel de combate");

        jLNombreMonstruoMod.setText("jLNombreMonstruoMod");

        jLNivelesGanadosMod.setText("jLNivelesGanadosMod");

        jLTesorosGanadosMod.setText("jLTesorosGanadosMod");

        jLExplicacionMalRolloMod.setText("jLExplicacionMalRolloMod");

        jLMensajesdeAyudaMod.setText("jLMensajesdeAyudaMod");

        jLNivelCombateMod.setText("jLNivelCombateMod");

        jLResultado.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLResultado.setText("Resultado");

        jBEquiparse.setText("Equiparse");
        jBEquiparse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEquiparseActionPerformed(evt);
            }
        });

        jBComprar.setText("Comprar nivel");
        jBComprar.setToolTipText("Sirve también para descartar tesoros, aunque no llegues a 1000  piezas de oro.");
        jBComprar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBComprarActionPerformed(evt);
            }
        });

        jBRobarTesoro.setText("Robar Tesoro");
        jBRobarTesoro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBRobarTesoroActionPerformed(evt);
            }
        });

        jBDescartar.setText("Descartarse tesoros");
        jBDescartar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDescartarActionPerformed(evt);
            }
        });

        jBCombatir.setText("¡COMBATIR!");
        jBCombatir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCombatirActionPerformed(evt);
            }
        });

        jBSiguiente.setText("Siguiente");
        jBSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSiguienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpEnemigoLayout = new javax.swing.GroupLayout(jpEnemigo);
        jpEnemigo.setLayout(jpEnemigoLayout);
        jpEnemigoLayout.setHorizontalGroup(
            jpEnemigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpEnemigoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpEnemigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jlAyuda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlMalorro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLTesorosGanados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLNivelesGanados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLnombreMonstruo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jpEnemigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLNivelesGanadosMod, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpEnemigoLayout.createSequentialGroup()
                        .addComponent(jLNombreMonstruoMod)
                        .addGap(168, 168, 168)
                        .addComponent(jLNivelCombate)
                        .addGap(18, 18, 18)
                        .addComponent(jLNivelCombateMod))
                    .addComponent(jLTesorosGanadosMod, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLExplicacionMalRolloMod, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpEnemigoLayout.createSequentialGroup()
                        .addComponent(jLMensajesdeAyudaMod, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLResultado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLResultadoMod, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpEnemigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jBEquiparse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBComprar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBDescartar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBRobarTesoro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jpEnemigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBCombatir, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpEnemigoLayout.setVerticalGroup(
            jpEnemigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpEnemigoLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jpEnemigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLNivelCombate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLNivelCombateMod, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBEquiparse)
                    .addComponent(jBCombatir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpEnemigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBComprar)
                    .addComponent(jBSiguiente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBRobarTesoro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBDescartar)
                .addContainerGap(12, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpEnemigoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jpEnemigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLnombreMonstruo)
                    .addComponent(jLNombreMonstruoMod, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpEnemigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLNivelesGanados)
                    .addComponent(jLNivelesGanadosMod, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpEnemigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLTesorosGanados, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLTesorosGanadosMod))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpEnemigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLExplicacionMalRolloMod, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpEnemigoLayout.createSequentialGroup()
                        .addComponent(jlMalorro, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpEnemigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLResultadoMod, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpEnemigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jlAyuda)
                        .addComponent(jLMensajesdeAyudaMod, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLResultado)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPJugador.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Parcelita de los débiles jugadores", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        jLSectario.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLSectario.setText("Sectario");

        jPanelTesorosVisibles.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tesoros Visibles", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        jPanelTesorosVisibles.add(jPTesoroVisible);

        jPanelTesorosOcultos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tesoros ocultos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        jPanelTesorosOcultos.add(jpTesoroOculto);

        jLNombreJugadorMod.setText("jLNombreMod");

        jLNombreyNivelJugador.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLNombreyNivelJugador.setText("Nombre(Nivel)");

        jLNivelJugadorMod.setText("jLNivelJugadorMod");

        jLSectarioSiNo.setText("SiNo");

        jLNivelCombateJugador.setText("niv");

        jLMalRolloVisibleTitulo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLMalRolloVisibleTitulo.setText("Mal Rollo Visible");

        jLMalRolloVisibleJugador.setText("jLabel1");

        jLMalRolloOcultoTitulo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLMalRolloOcultoTitulo.setText("Mal Rollo Oculto");

        jLMalRolloOcultoJugador.setText("jLabel1");

        jLNVisiblesRestantes.setText("nº visibles restantes");

        jLNOcultosRestantes.setText("nº ocultos restantes");

        jBAbandonar.setText("No puedo cumplir");
        jBAbandonar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAbandonarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPJugadorLayout = new javax.swing.GroupLayout(jPJugador);
        jPJugador.setLayout(jPJugadorLayout);
        jPJugadorLayout.setHorizontalGroup(
            jPJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPJugadorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPJugadorLayout.createSequentialGroup()
                        .addComponent(jPanelTesorosVisibles, javax.swing.GroupLayout.PREFERRED_SIZE, 667, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLMalRolloVisibleJugador, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPJugadorLayout.createSequentialGroup()
                                .addComponent(jLMalRolloVisibleTitulo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLNVisiblesRestantes)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPJugadorLayout.createSequentialGroup()
                        .addComponent(jLNombreyNivelJugador, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLNombreJugadorMod)
                        .addGap(116, 116, 116)
                        .addComponent(jLNivelJugadorMod, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLNivelCombateJugador, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(83, 83, 83)
                        .addComponent(jLSectario, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLSectarioSiNo)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPJugadorLayout.createSequentialGroup()
                        .addComponent(jPanelTesorosOcultos, javax.swing.GroupLayout.PREFERRED_SIZE, 667, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLMalRolloOcultoJugador, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPJugadorLayout.createSequentialGroup()
                                .addComponent(jLMalRolloOcultoTitulo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jBAbandonar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLNOcultosRestantes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPJugadorLayout.setVerticalGroup(
            jPJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPJugadorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLSectario, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(jLSectarioSiNo)
                    .addGroup(jPJugadorLayout.createSequentialGroup()
                        .addGroup(jPJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLNombreyNivelJugador, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                            .addGroup(jPJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLNombreJugadorMod, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLNivelJugadorMod)
                                .addComponent(jLNivelCombateJugador)))
                        .addGap(6, 6, 6)))
                .addGap(18, 18, 18)
                .addGroup(jPJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPJugadorLayout.createSequentialGroup()
                        .addComponent(jPanelTesorosVisibles, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPJugadorLayout.createSequentialGroup()
                        .addGroup(jPJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLMalRolloVisibleTitulo)
                            .addComponent(jLNVisiblesRestantes))
                        .addGap(18, 18, 18)
                        .addComponent(jLMalRolloVisibleJugador)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBAbandonar)
                        .addGap(33, 33, 33)))
                .addGroup(jPJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPJugadorLayout.createSequentialGroup()
                        .addGroup(jPJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLMalRolloOcultoTitulo)
                            .addComponent(jLNOcultosRestantes))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLMalRolloOcultoJugador)
                        .addGap(125, 125, 125))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPJugadorLayout.createSequentialGroup()
                        .addComponent(jPanelTesorosOcultos, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPJugador, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpEnemigo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpEnemigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPJugador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jpEnemigo.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSiguienteActionPerformed
        if(!juego.getJugadorActivo().cumploMalRollo()){
                JOptionPane.showMessageDialog(VentanaPrincipal.this, "Tienes mal rollo que cumplir.", "mensaje", 1);
            }else{
                try{
                    listaTesorosOcultosSeleccionados.clear();
                    listaTesorosVisiblesSeleccionados.clear();
                    juego.siguienteTurno();
                    actualizarJugador();
                    actualizarMonstruo();
                    jBRobarTesoro.setEnabled(true);
                    jBComprar.setEnabled(true);
                    jBCombatir.setEnabled(true);
                    jBSiguiente.setEnabled(true);
                }catch(Exception e){
                    JOptionPane.showMessageDialog(VentanaPrincipal.this, "Tienes mas de 4 tesoros, no puedes pasar turno.", "mensaje", 1);
                }
        }

    }//GEN-LAST:event_jBSiguienteActionPerformed

    private void jBCombatirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCombatirActionPerformed
        int resultado = juego.desarrollarCombate();
        jBSiguiente.setEnabled(true);
        actualizarJugador();
        actualizarMonstruo();
        listaTesorosVisiblesSeleccionados.clear();
        listaTesorosOcultosSeleccionados.clear();

        jBCombatir.setEnabled(false);
        jBSiguiente.setEnabled(true);
        jBEquiparse.setEnabled(true);
        if(resultado == 10){
            jLResultadoMod.setText("FIN DEL JUEGO");
        }else if(resultado == 1){
            jLResultadoMod.setText("Victoria");
        }else if(resultado == 0){
            jLResultadoMod.setText("Escape");
        }else if (resultado == -1){
            jLResultadoMod.setText("Derrotado");
        }else if(resultado == -2){
            jLResultadoMod.setText("Muerto");
        }else{
            jLResultadoMod.setText("");
        }

        if(resultado == 10){
            JOptionPane.showMessageDialog(VentanaPrincipal.this, "Ha ganado el Jugador: " + juego.getJugadorActivo().getNombre(), "Fin del juego", 1);
            finJuego();
        }else if(resultado == 1){
            JOptionPane.showMessageDialog(VentanaPrincipal.this, "Has derrotado al monstruo. Eres un monstruo." + juego.getJugadorActivo().getNombre(), "El juego continua.",1);
        }else if (resultado == 0){
            JOptionPane.showMessageDialog(VentanaPrincipal.this, "Has escapado, por los pelos." + juego.getJugadorActivo().getNombre(), "El juego continua.", 1);
        }else if (resultado == -1){
            JOptionPane.showMessageDialog(VentanaPrincipal.this, "Has sido derrotado por el monstruo." + juego.getJugadorActivo().getNombre(), "El juego continua.", 1);
        }else if (resultado == -2){
            JOptionPane.showMessageDialog(VentanaPrincipal.this, "Has muerto." + juego.getJugadorActivo().getNombre(), "El juego continua.", 1);
        }

        actualizarJugador();
        actualizarMonstruo();
    }//GEN-LAST:event_jBCombatirActionPerformed

    private void jBDescartarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDescartarActionPerformed
        juego.descartarTesoros(listaTesorosVisiblesSeleccionados, listaTesorosOcultosSeleccionados);
        listaTesorosOcultosSeleccionados.clear();
        jPanelTesorosOcultos.removeAll();
        listaTesorosVisiblesSeleccionados.clear();
        jPanelTesorosVisibles.removeAll();
        actualizarJugador();
    }//GEN-LAST:event_jBDescartarActionPerformed

    private void jBRobarTesoroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBRobarTesoroActionPerformed
        juego.getJugadorActivo().robarTesoro(juego.getsiguienteTesoro());
        jBRobarTesoro.setEnabled(false);
        actualizarJugador();
    }//GEN-LAST:event_jBRobarTesoroActionPerformed

    private void jBComprarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBComprarActionPerformed
        ArrayList<Tesoro> listaTesorosTodos = new ArrayList();
        
        listaTesorosTodos.addAll(listaTesorosVisiblesSeleccionados);
        listaTesorosTodos.addAll(listaTesorosOcultosSeleccionados);
        
        juego.comprarNivelesJugador(listaTesorosTodos);
        listaTesorosVisiblesSeleccionados.clear();
        listaTesorosOcultosSeleccionados.clear();
        actualizarJugador();
    }//GEN-LAST:event_jBComprarActionPerformed

    private void jBEquiparseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEquiparseActionPerformed
        juego.getJugadorActivo().equiparTesoros(listaTesorosOcultosSeleccionados);
        listaTesorosOcultosSeleccionados.clear();
        actualizarJugador();
    }//GEN-LAST:event_jBEquiparseActionPerformed

    private void jBAbandonarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAbandonarActionPerformed
        juego.getJugadorActivo().modificarNivel(Jugador.getNIVEL_MINIMO());
        juego.getJugadorActivo().tesorosOcultos.clear();
        juego.getJugadorActivo().tesorosVisibles.clear();
        juego.getJugadorActivo().malRolloOculto.clear();
        juego.getJugadorActivo().malRolloVisible.clear();
        juego.getJugadorActivo().numeroOcultos = 0;
        juego.getJugadorActivo().numeroVisibles = 0;
        jPanelTesorosVisibles.removeAll();
        jPanelTesorosOcultos.removeAll();
        actualizarJugador();
    }//GEN-LAST:event_jBAbandonarActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAbandonar;
    private javax.swing.JButton jBCombatir;
    private javax.swing.JButton jBComprar;
    private javax.swing.JButton jBDescartar;
    private javax.swing.JButton jBEquiparse;
    private javax.swing.JButton jBRobarTesoro;
    private javax.swing.JButton jBSiguiente;
    private javax.swing.JLabel jLExplicacionMalRolloMod;
    private javax.swing.JLabel jLMalRolloOcultoJugador;
    private javax.swing.JLabel jLMalRolloOcultoTitulo;
    private javax.swing.JLabel jLMalRolloVisibleJugador;
    private javax.swing.JLabel jLMalRolloVisibleTitulo;
    private javax.swing.JLabel jLMensajesdeAyudaMod;
    private javax.swing.JLabel jLNOcultosRestantes;
    private javax.swing.JLabel jLNVisiblesRestantes;
    private javax.swing.JLabel jLNivelCombate;
    private javax.swing.JLabel jLNivelCombateJugador;
    private javax.swing.JLabel jLNivelCombateMod;
    private javax.swing.JLabel jLNivelJugadorMod;
    private javax.swing.JLabel jLNivelesGanados;
    private javax.swing.JLabel jLNivelesGanadosMod;
    private javax.swing.JLabel jLNombreJugadorMod;
    private javax.swing.JLabel jLNombreMonstruoMod;
    private javax.swing.JLabel jLNombreyNivelJugador;
    private javax.swing.JLabel jLResultado;
    private javax.swing.JLabel jLResultadoMod;
    private javax.swing.JLabel jLSectario;
    private javax.swing.JLabel jLSectarioSiNo;
    private javax.swing.JLabel jLTesorosGanados;
    private javax.swing.JLabel jLTesorosGanadosMod;
    private javax.swing.JLabel jLnombreMonstruo;
    private javax.swing.JPanel jPJugador;
    private javax.swing.JPanel jPTesoroVisible;
    private javax.swing.JPanel jPanelTesorosOcultos;
    private javax.swing.JPanel jPanelTesorosVisibles;
    private javax.swing.JLabel jlAyuda;
    private javax.swing.JLabel jlMalorro;
    private javax.swing.JPanel jpEnemigo;
    private javax.swing.JPanel jpTesoroOculto;
    // End of variables declaration//GEN-END:variables

 @Override
    public void mostrar(String args[]) {
        JDnombresJugadores dialogoNombres;
        dado = new JD_dado (this,true);
        dialogoNombres = new JDnombresJugadores(this,true);
        nombresJugadores = dialogoNombres.getNombres();
        try {
            juego.comenzarJuego(nombresJugadores);
            juego.siguienteTurno();
            actualizarJugador();
            actualizarMonstruo();
        } catch (Exception ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.setVisible(true);
    }
    @Override
    public int getDado (String s1, String s2) {
        return dado.getValor(s1, s2);
    }       
    
    
    private class TesoroGrafico extends JPanel {
        protected Tesoro tesoro; // asociación con el tesoro que representa
         private static final int TIPO_VISIBLE = 1;
        private static final int TIPO_OCULTO = 0;
        private int tipoTesoro;
        
        TesoroGrafico (Tesoro unTesoro, int tipo) { 
                tesoro = unTesoro;
                tipoTesoro = tipo;
                //this.setPreferredSize(new java.awt.Dimension(100, 140));
                //this.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
                
                //jL_nombre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                //jL_nombre.setText(tesoro.getNombre());
                //this.setOpaque(false);
                inicializarComponentes(unTesoro);

        }

        private void inicializarComponentes(Tesoro unTesoro) {

            jLtipoT = new javax.swing.JLabel();
            jLnombreT = new javax.swing.JLabel();
            jLbonusT = new javax.swing.JLabel();
            jLpiezsT = new javax.swing.JLabel();

            this.setOpaque(false);

            this.setBackground (new java.awt.Color(200,200,0));
            setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
            String tipo = null;

            if (unTesoro.GetTipo() == TipoTesoro.CASCO) {
                tipo = "CASCO";
            }

            if (unTesoro.GetTipo() == TipoTesoro.ARMADURA) {
                tipo = "ARMADURA";
            }

            if (unTesoro.GetTipo() == TipoTesoro.CALZADO) {
                tipo = "CALZADO";
            }

            if (unTesoro.GetTipo() == TipoTesoro.MANO) {
                tipo = "UNA MANO";
            }

            if (unTesoro.GetTipo() == TipoTesoro.DOSMANOS) {
                tipo = "DOS MANOS";
            }
            
            if (unTesoro.GetTipo() == TipoTesoro.COLLAR) {
                tipo = "COLLAR";
            }
            jLtipoT.setText(tipo);
            jLtipoT.setFont(new java.awt.Font("Arial", 0, 13));
            add(jLtipoT, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 16, -1, -1));

            jLnombreT.setText(unTesoro.getNombre());
            jLnombreT.setFont(new java.awt.Font("Arial", 0, 13));
            add(jLnombreT, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 80, -1));

            jLbonusT.setText("+" + unTesoro.GetBonusMinimo() + "/+" + unTesoro.GetBonusMaximo());
            jLbonusT.setFont(new java.awt.Font("Arial", 0, 13));
            add(jLbonusT, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 136, -1, -1));

            jLpiezsT.setText(Integer.toString(unTesoro.GetPiezasOro()));
            jLpiezsT.setFont(new java.awt.Font("Arial", 0, 13));
            add(jLpiezsT, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 136, -1, -1));

            if (tipoTesoro == TIPO_VISIBLE) {
                this.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
            } else if (tipoTesoro == TIPO_OCULTO) {
                this.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
            }
        }
        private javax.swing.JLabel jLbonusT;
        private javax.swing.JLabel jLnombreT;
        private javax.swing.JLabel jLpiezsT;
        private javax.swing.JLabel jLtipoT;
    }
    
    private class TesoroGraficoVisible extends TesoroGrafico {

        TesoroGraficoVisible(Tesoro unTesoro) {
            super(unTesoro, 1);
            this.setBackground(Color.red);
            addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    if(listaTesorosVisiblesSeleccionados.contains(tesoro)){
                        listaTesorosVisiblesSeleccionados.remove(tesoro);
                        TesoroGraficoVisible.this.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                        repaint();
                    }else{
                        listaTesorosVisiblesSeleccionados.add(tesoro);
                        TesoroGraficoVisible.this.setBorder(new javax.swing.border.LineBorder(Color.ORANGE, 5, true));
                        repaint();
                    }
                }
            });
        }
    }
    private class TesoroGraficoOculto extends TesoroGrafico {

        TesoroGraficoOculto(Tesoro unTesoro) {
            super(unTesoro, 0);
            this.setBackground(Color.blue);
// instrucciones que le dan un aspecto distinto a este tipo de tesoro
            addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    if(listaTesorosOcultosSeleccionados.contains(tesoro)){
                        listaTesorosOcultosSeleccionados.remove(tesoro);
                        TesoroGraficoOculto.this.setBorder(new javax.swing.border.LineBorder(Color.BLACK));
                        repaint();
                    }else{
                        listaTesorosOcultosSeleccionados.add(tesoro);
                        TesoroGraficoOculto.this.setBorder(new javax.swing.border.LineBorder(Color.ORANGE, 5, true));
                        repaint();
                    }
                }
            });
        }
    }
    
    
    private void actualizarJugador() {       
        jLNombreJugadorMod.setText(juego.getJugadorActivo().getNombre());
        jLNivelJugadorMod.setText("Nivel: "+Integer.toString(juego.getJugadorActivo().getNivel()));
        
        jLMalRolloVisibleJugador.setText(juego.getJugadorActivo().getMRVisible());
        jLMalRolloOcultoJugador.setText(juego.getJugadorActivo().getMROculto());
        jLNVisiblesRestantes.setText("("+Integer.toString(juego.getJugadorActivo().getNumeroVisibles())+" restantes)");
        jLNOcultosRestantes.setText("("+Integer.toString(juego.getJugadorActivo().getNumeroOcultos())+" restantes)");
        
        if(juego.getJugadorActivo() instanceof JugadorSectario){
            jLSectarioSiNo.setText("Sí");
            jLNivelCombateJugador.setText("("+Integer.toString(juego.getJugadorActivo().getnivelCombate())+")");
        }else if (juego.getJugadorActivo() instanceof Jugador){
            jLSectarioSiNo.setText("No");
            jLNivelCombateJugador.setText("("+Integer.toString(juego.getJugadorActivo().getnivelCombate())+")");
        }else{
            jLSectarioSiNo.setText("");
            jLNivelCombateJugador.setText("");
        }
        
        for(TesoroGrafico T : tesorosActuales){
            jPJugador.remove(T);
        }
        
        tesorosActuales.clear();
        jPanelTesorosVisibles.removeAll();
            
        TesoroGrafico unTesoroGrafico= null;
        int x=0;
        for(Tesoro T : juego.getJugadorActivo().getTesorosVisibles()){
            unTesoroGrafico = new TesoroGraficoVisible(T);
            jPanelTesorosVisibles.add(unTesoroGrafico, new org.netbeans.lib.awtextra.AbsoluteConstraints(posXtesorVisib[x], posYtesorVisib, -1, -1));
            tesorosActuales.add(unTesoroGrafico);
            x++;
        }
        
        int size = juego.getJugadorActivo().getTesorosOcultos().size();
        
            jPanelTesorosOcultos.removeAll();
        
            int j=0;
            for(Tesoro T : juego.getJugadorActivo().getTesorosOcultos()){
                //VALE 33
                unTesoroGrafico = new TesoroGraficoOculto(T);
                jPanelTesorosOcultos.add(unTesoroGrafico, new org.netbeans.lib.awtextra.AbsoluteConstraints(posXtesorOcult[j], posYtesorOcult, -1, -1));
                tesorosActuales.add(unTesoroGrafico);
                jPanelTesorosOcultos.repaint();
                j++;
            }
            pack();
            repaint();
        //PROVISIONAL: todo lo relacionado con ser sectario o no.
    }
    private void actualizarMonstruo(){
        jLNombreMonstruoMod.setText(juego.getMonstruoActivo().getNombre());
        jLNivelesGanadosMod.setText(Integer.toString(juego.getMonstruoActivo().GetGananciaNiveles()));
        jLTesorosGanadosMod.setText(Integer.toString(juego.getMonstruoActivo().GetGananciaTesoros()));
        jLExplicacionMalRolloMod.setText(juego.getMonstruoActivo().GetMalRollo());
        jLNivelCombateMod.setText(Integer.toString(juego.getMonstruoActivo().GetNivel()));
        jLMensajesdeAyudaMod.setText("Puedes robar el tesoro antes de combatir.");
        pack();
        repaint();
    }
    private void finJuego() {
        jBSiguiente.setEnabled(false);
        jBRobarTesoro.setEnabled(false);
        jBCombatir.setEnabled(false);
        jBComprar.setEnabled(false);
        jBEquiparse.setEnabled(false);
        jBDescartar.setEnabled(false);
        jLNombreJugadorMod.setText("Ha ganado el Jugador: " + juego.getJugadorActivo().getNombre());
    }
}
